{"ast":null,"code":"var _jsxFileName = \"/Users/aliyabiggs/Documents/cord-fe-challenge-2024-06/src/pages/discover/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport * as fetcher from \"../../utils/fetcher\";\nimport useMediaQuery from \"../../utils/useMediaQuery\";\nimport SearchFilters from \"../../components/searchfilter\";\nimport MovieList from \"../../components/movielist\";\nexport default function Discover() {\n  // You don't need to keep the current structure of this state object. Feel free to restructure it as needed.\n  const [state, setState] = useState({\n    keyword: \"\",\n    year: 0,\n    results: [],\n    movieDetails: null,\n    totalCount: 0,\n    genreOptions: [],\n    ratingOptions: [{\n      id: 7.5,\n      name: 7.5\n    }, {\n      id: 8,\n      name: 8\n    }, {\n      id: 8.5,\n      name: 8.5\n    }, {\n      id: 9,\n      name: 9\n    }, {\n      id: 9.5,\n      name: 9.5\n    }, {\n      id: 10,\n      name: 10\n    }],\n    languageOptions: [{\n      id: \"GR\",\n      name: \"Greek\"\n    }, {\n      id: \"EN\",\n      name: \"English\"\n    }, {\n      id: \"RU\",\n      name: \"Russian\"\n    }, {\n      id: \"PO\",\n      name: \"Polish\"\n    }]\n  });\n  const isMobile = useMediaQuery(\"(max-width: 480px)\");\n  const searchMovies = async (keyword, year) => {\n    // Write a function to trigger the API request and load the search results based on the keyword and year given as parameters\n    const searchResults = await fetcher.getMovieByKeywordAndYear(keyword, year);\n    setState(prevState => ({\n      ...prevState,\n      results: searchResults\n    }));\n  };\n  const {\n    genreOptions,\n    languageOptions,\n    ratingOptions,\n    totalCount,\n    results,\n    movieDetails\n  } = state;\n\n  // Write a function to preload the popular movies when page loads & get the movie genres\n  const initialLoad = async () => {\n    const popularMovies = await fetcher.getPopularMovies();\n    const movieGenres = await fetcher.getGenreOptions();\n    const totalCount = await fetcher.getTotalMovieCount();\n    const languageOptions = await fetcher.getLanguageOptions();\n    setState(prevState => ({\n      ...prevState,\n      results: popularMovies,\n      genreOptions: movieGenres,\n      totalCount: totalCount,\n      languageOptions: languageOptions\n    }));\n  };\n  useEffect(() => {\n    initialLoad();\n  }, []);\n  return /*#__PURE__*/React.createElement(DiscoverWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, isMobile && /*#__PURE__*/React.createElement(MobilePageTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 20\n    }\n  }, \"Discover\"), !isMobile && totalCount > 0 && /*#__PURE__*/React.createElement(TotalCounter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 39\n    }\n  }, totalCount, \" movies\"), /*#__PURE__*/React.createElement(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MovieResults, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MovieList, {\n    movies: results || [],\n    genres: genreOptions || [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  })), isMobile && totalCount > 0 && /*#__PURE__*/React.createElement(TotalCounter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 40\n    }\n  }, totalCount, \" movies\"), /*#__PURE__*/React.createElement(MovieFilters, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchFilters, {\n    genres: genreOptions,\n    ratings: ratingOptions,\n    languages: languageOptions,\n    searchMovies: (keyword, year) => searchMovies(keyword, year),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }))));\n}\nconst breakpoints = {\n  mobile: \"480px\",\n  desktop: \"1024px\"\n};\nconst media = {\n  mobile: `(max-width: ${breakpoints.mobile})`,\n  desktop: `(max-width: ${breakpoints.desktop})`\n};\nconst DiscoverWrapper = styled.div`\n  padding: 60px 35px;\n\n  @media ${media.mobile} {\n    padding: 20px;\n  }\n`;\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-gap: 16px;\n\n  @media ${media.mobile} {\n    display: flex;\n    flex-direction: column-reverse;\n  }\n`;\nconst TotalCounter = styled.div`\n  font-weight: 200;\n  font-size: 0.8em;\n  padding-bottom: 15px;\n\n  @media ${media.mobile} {\n    font-weight: 200;\n    font-size: 0.8em;\n\n  }\n`;\nconst MovieResults = styled.div``;\nconst MovieFilters = styled.div``;\nconst MobilePageTitle = styled.header`\n  @media ${media.mobile} {\n    display: visibile;\n    font-size: 30px;\n    padding-bottom: 15px;\n  }\n`;","map":{"version":3,"names":["React","useEffect","useState","styled","fetcher","useMediaQuery","SearchFilters","MovieList","Discover","state","setState","keyword","year","results","movieDetails","totalCount","genreOptions","ratingOptions","id","name","languageOptions","isMobile","searchMovies","searchResults","getMovieByKeywordAndYear","prevState","initialLoad","popularMovies","getPopularMovies","movieGenres","getGenreOptions","getTotalMovieCount","getLanguageOptions","createElement","DiscoverWrapper","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","MobilePageTitle","TotalCounter","GridContainer","MovieResults","movies","genres","MovieFilters","ratings","languages","breakpoints","mobile","desktop","media","div","header"],"sources":["/Users/aliyabiggs/Documents/cord-fe-challenge-2024-06/src/pages/discover/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport * as colors from \"../../colors\";\r\nimport * as fetcher from \"../../utils/fetcher\";\r\nimport useMediaQuery from \"../../utils/useMediaQuery\";\r\n\r\nimport SearchFilters from \"../../components/searchfilter\";\r\nimport MovieList from \"../../components/movielist\";\r\n\r\nexport default function Discover() {\r\n  // You don't need to keep the current structure of this state object. Feel free to restructure it as needed.\r\n  const [state, setState] = useState({\r\n    keyword: \"\",\r\n    year: 0,\r\n    results: [],\r\n    movieDetails: null,\r\n    totalCount: 0,\r\n    genreOptions: [],\r\n    ratingOptions: [\r\n      { id: 7.5, name: 7.5 },\r\n      { id: 8, name: 8 },\r\n      { id: 8.5, name: 8.5 },\r\n      { id: 9, name: 9 },\r\n      { id: 9.5, name: 9.5 },\r\n      { id: 10, name: 10 },\r\n    ],\r\n    languageOptions: [\r\n      { id: \"GR\", name: \"Greek\" },\r\n      { id: \"EN\", name: \"English\" },\r\n      { id: \"RU\", name: \"Russian\" },\r\n      { id: \"PO\", name: \"Polish\" },\r\n    ],\r\n  });\r\n\r\n  const isMobile = useMediaQuery(\"(max-width: 480px)\");\r\n\r\n  const searchMovies = async (\r\n    keyword: string | undefined,\r\n    year: number | undefined\r\n  ) => {\r\n    // Write a function to trigger the API request and load the search results based on the keyword and year given as parameters\r\n    const searchResults = await fetcher.getMovieByKeywordAndYear(keyword, year);\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      results: searchResults,\r\n    }));\r\n  };\r\n\r\n  const {\r\n    genreOptions,\r\n    languageOptions,\r\n    ratingOptions,\r\n    totalCount,\r\n    results,\r\n    movieDetails,\r\n  } = state;\r\n\r\n  // Write a function to preload the popular movies when page loads & get the movie genres\r\n  const initialLoad = async () => {\r\n    const popularMovies = await fetcher.getPopularMovies();\r\n    const movieGenres = await fetcher.getGenreOptions();\r\n    const totalCount = await fetcher.getTotalMovieCount();\r\n    const languageOptions = await fetcher.getLanguageOptions();\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      results: popularMovies,\r\n      genreOptions: movieGenres,\r\n      totalCount: totalCount,\r\n      languageOptions: languageOptions,\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    initialLoad();\r\n  }, []);\r\n\r\n  return (\r\n    <DiscoverWrapper>\r\n      {isMobile && <MobilePageTitle>Discover</MobilePageTitle>}\r\n      {!isMobile && totalCount > 0 && <TotalCounter>{totalCount} movies</TotalCounter>}\r\n      <GridContainer>\r\n        <MovieResults>\r\n          <MovieList\r\n            movies={(results as []) || []}\r\n            genres={(genreOptions as []) || []}\r\n          />\r\n          {/* Each movie must have a unique URL and if clicked a pop-up should appear showing the movie details and the action buttons as shown in the wireframe */}\r\n        </MovieResults>\r\n        {isMobile && totalCount > 0 && <TotalCounter>{totalCount} movies</TotalCounter>}\r\n        <MovieFilters>\r\n          <SearchFilters\r\n            genres={genreOptions}\r\n            ratings={ratingOptions}\r\n            languages={languageOptions}\r\n            searchMovies={(\r\n              keyword: string | undefined,\r\n              year: number | undefined\r\n            ) => searchMovies(keyword, year)}\r\n          />\r\n        </MovieFilters>\r\n      </GridContainer>\r\n    </DiscoverWrapper>\r\n  );\r\n}\r\n\r\nconst breakpoints = {\r\n  mobile: \"480px\",\r\n  desktop: \"1024px\",\r\n};\r\n\r\nconst media = {\r\n  mobile: `(max-width: ${breakpoints.mobile})`,\r\n  desktop: `(max-width: ${breakpoints.desktop})`,\r\n};\r\n\r\nconst DiscoverWrapper = styled.div`\r\n  padding: 60px 35px;\r\n\r\n  @media ${media.mobile} {\r\n    padding: 20px;\r\n  }\r\n`;\r\n\r\nconst GridContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr;\r\n  grid-gap: 16px;\r\n\r\n  @media ${media.mobile} {\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n  }\r\n`;\r\n\r\nconst TotalCounter = styled.div`\r\n  font-weight: 200;\r\n  font-size: 0.8em;\r\n  padding-bottom: 15px;\r\n\r\n  @media ${media.mobile} {\r\n    font-weight: 200;\r\n    font-size: 0.8em;\r\n\r\n  }\r\n`;\r\n\r\nconst MovieResults = styled.div``;\r\n\r\nconst MovieFilters = styled.div``;\r\n\r\nconst MobilePageTitle = styled.header`\r\n  @media ${media.mobile} {\r\n    display: visibile;\r\n    font-size: 30px;\r\n    padding-bottom: 15px;\r\n  }\r\n`;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}