{"ast":null,"code":"var _jsxFileName = \"/Users/aliyabiggs/Documents/cord-fe-challenge-2024-06/src/pages/discover/index.tsx\";\nimport React, { useEffect, useState, Suspense, Profiler } from \"react\";\nimport styled from \"styled-components\";\nimport SearchFilters from \"../../components/searchfilter\";\nimport MovieList from \"../../components/movielist\";\nimport BurgerMenuIcon from \"../../components/burgerMenuIcon\";\nimport * as fetcher from \"../../utils/fetcher\";\nimport { media } from \"../../utils/mediaBreakPoints\";\nimport { useMediaQuery } from \"../../utils/useMediaQuery\";\nimport { onRender } from \"../../utils/onRender\";\nimport ErrorModal from \"../../components/errorModal\";\nexport default function Discover({\n  toggleNavBar,\n  isOpen\n}) {\n  // You don't need to keep the current structure of this state object. Feel free to restructure it as needed.\n  const [state, setState] = useState({\n    keyword: \"\",\n    year: 0,\n    results: [],\n    movieDetails: null,\n    totalCount: 0,\n    genreOptions: [],\n    ratingOptions: [{\n      id: 7.5,\n      name: 7.5\n    }, {\n      id: 8,\n      name: 8\n    }, {\n      id: 8.5,\n      name: 8.5\n    }, {\n      id: 9,\n      name: 9\n    }, {\n      id: 9.5,\n      name: 9.5\n    }, {\n      id: 10,\n      name: 10\n    }],\n    languageOptions: [{\n      id: \"GR\",\n      name: \"Greek\"\n    }, {\n      id: \"EN\",\n      name: \"English\"\n    }, {\n      id: \"RU\",\n      name: \"Russian\"\n    }, {\n      id: \"PO\",\n      name: \"Polish\"\n    }]\n  });\n  const isMobile = useMediaQuery(\"(max-width: 480px)\");\n  const searchMovies = async (keyword, year) => {\n    // Write a function to trigger the API request and load the search results based on the keyword and year given as parameters\n    const searchResults = await fetcher.getMovieByKeywordAndYear(keyword, year);\n    if (searchResults.length > 0) {\n      setState(prevState => ({\n        ...prevState,\n        results: searchResults,\n        totalCount: searchResults.length\n      }));\n    } else {\n      setState(prevState => ({\n        ...prevState,\n        totalCount: 0\n      }));\n      return /*#__PURE__*/React.createElement(ErrorModal, {\n        errors: [\"There are no results for this year\"],\n        display: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }\n      });\n    }\n  };\n  const {\n    genreOptions,\n    languageOptions,\n    ratingOptions,\n    totalCount,\n    results,\n    movieDetails\n  } = state;\n\n  // Write a function to preload the popular movies when page loads & get the movie genres\n  const initialLoad = async () => {\n    try {\n      const popularMovies = await fetcher.getPopularMovies();\n      const movieGenres = await fetcher.getGenreOptions();\n      const totalCount = await fetcher.getTotalMovieCount();\n      const languageOptions = await fetcher.getLanguageOptions();\n      setState(prevState => ({\n        ...prevState,\n        results: popularMovies,\n        genreOptions: movieGenres,\n        totalCount: totalCount,\n        languageOptions: languageOptions\n      }));\n    } catch (error) {\n      console.log(\"Error fetching initial data: \", error);\n    }\n  };\n  useEffect(() => {\n    initialLoad();\n  }, []);\n  return /*#__PURE__*/React.createElement(Profiler, {\n    id: \"Discover page\",\n    onRender: onRender,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DiscoverWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, isMobile && /*#__PURE__*/React.createElement(MobilePageHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BurgerMenuIcon, {\n    onClick: toggleNavBar,\n    isOpen: isOpen,\n    \"aria-label\": \"Open menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MobilePageTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Discover\")), !isMobile && totalCount > 0 && /*#__PURE__*/React.createElement(TotalCounter, {\n    \"aria-label\": \"Movie count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, totalCount, \" movies\"), /*#__PURE__*/React.createElement(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Suspense, {\n    fallback: /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 31\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MovieResults, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MovieList, {\n    movies: results || [],\n    genres: genreOptions || [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }))), isMobile && totalCount > 0 && /*#__PURE__*/React.createElement(TotalCounter, {\n    \"aria-label\": \"Movie count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, totalCount, \" movies\"), /*#__PURE__*/React.createElement(MovieFilters, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SearchFilters, {\n    genres: genreOptions,\n    ratings: ratingOptions,\n    languages: languageOptions,\n    searchMovies: (keyword, year) => searchMovies(keyword, year),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  })))));\n}\nconst DiscoverWrapper = styled.div`\n  padding: 60px 35px;\n\n  @media ${media.mobile} {\n    padding: 20px;\n  }\n`;\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-gap: 16px;\n\n  @media ${media.mobile} {\n    display: flex;\n    flex-direction: column-reverse;\n  }\n`;\nconst TotalCounter = styled.div`\n  font-weight: 200;\n  font-size: 0.8em;\n  padding-bottom: 15px;\n\n  @media ${media.mobile} {\n    font-weight: 200;\n    font-size: 0.8em;\n    padding-bottom: 0px;\n  }\n`;\nconst MovieResults = styled.div``;\nconst MovieFilters = styled.div``;\nconst MobilePageHeader = styled.header`\n  @media ${media.mobile} {\n    display: flex;\n    align-items: center;\n    gap: 20px;\n    margin-bottom: 20px;\n  }\n`;\nconst MobilePageTitle = styled.h1`\n  @media ${media.mobile} {\n    display: visibile;\n    font-size: 30px;\n  }\n`;\nfunction Loading() {\n  return /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 10\n    }\n  }, \"Loading...\");\n}","map":{"version":3,"names":["React","useEffect","useState","Suspense","Profiler","styled","SearchFilters","MovieList","BurgerMenuIcon","fetcher","media","useMediaQuery","onRender","ErrorModal","Discover","toggleNavBar","isOpen","state","setState","keyword","year","results","movieDetails","totalCount","genreOptions","ratingOptions","id","name","languageOptions","isMobile","searchMovies","searchResults","getMovieByKeywordAndYear","length","prevState","createElement","errors","display","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","initialLoad","popularMovies","getPopularMovies","movieGenres","getGenreOptions","getTotalMovieCount","getLanguageOptions","error","console","log","DiscoverWrapper","MobilePageHeader","onClick","MobilePageTitle","TotalCounter","GridContainer","fallback","Loading","MovieResults","movies","genres","MovieFilters","ratings","languages","div","mobile","header","h1"],"sources":["/Users/aliyabiggs/Documents/cord-fe-challenge-2024-06/src/pages/discover/index.tsx"],"sourcesContent":["import React, { useEffect, useState, Suspense, Profiler } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SearchFilters from \"../../components/searchfilter\";\r\nimport MovieList from \"../../components/movielist\";\r\nimport BurgerMenuIcon from \"../../components/burgerMenuIcon\";\r\nimport * as fetcher from \"../../utils/fetcher\";\r\nimport { media } from \"../../utils/mediaBreakPoints\";\r\nimport { useMediaQuery } from \"../../utils/useMediaQuery\";\r\nimport { onRender } from \"../../utils/onRender\";\r\nimport ErrorModal from \"../../components/errorModal\";\r\n\r\ntype DiscoverProps = {\r\n  toggleNavBar: () => void;\r\n  isOpen: boolean;\r\n};\r\n\r\nexport default function Discover({ toggleNavBar, isOpen }: DiscoverProps) {\r\n  // You don't need to keep the current structure of this state object. Feel free to restructure it as needed.\r\n  const [state, setState] = useState({\r\n    keyword: \"\",\r\n    year: 0,\r\n    results: [],\r\n    movieDetails: null,\r\n    totalCount: 0,\r\n    genreOptions: [],\r\n    ratingOptions: [\r\n      { id: 7.5, name: 7.5 },\r\n      { id: 8, name: 8 },\r\n      { id: 8.5, name: 8.5 },\r\n      { id: 9, name: 9 },\r\n      { id: 9.5, name: 9.5 },\r\n      { id: 10, name: 10 },\r\n    ],\r\n    languageOptions: [\r\n      { id: \"GR\", name: \"Greek\" },\r\n      { id: \"EN\", name: \"English\" },\r\n      { id: \"RU\", name: \"Russian\" },\r\n      { id: \"PO\", name: \"Polish\" },\r\n    ],\r\n  });\r\n\r\n  const isMobile = useMediaQuery(\"(max-width: 480px)\");\r\n\r\n  const searchMovies = async (\r\n    keyword: string | undefined,\r\n    year: number | undefined\r\n  ) => {\r\n    // Write a function to trigger the API request and load the search results based on the keyword and year given as parameters\r\n    const searchResults = await fetcher.getMovieByKeywordAndYear(keyword, year);\r\n    if (searchResults.length > 0) {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        results: searchResults,\r\n        totalCount: searchResults.length\r\n      }));\r\n    } else {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        totalCount: 0\r\n      }));\r\n      return (<ErrorModal errors={[\"There are no results for this year\"]} display={true} />)\r\n    }\r\n    \r\n  };\r\n\r\n  const {\r\n    genreOptions,\r\n    languageOptions,\r\n    ratingOptions,\r\n    totalCount,\r\n    results,\r\n    movieDetails,\r\n  } = state;\r\n\r\n  // Write a function to preload the popular movies when page loads & get the movie genres\r\n  const initialLoad = async () => {\r\n    try {\r\n      const popularMovies = await fetcher.getPopularMovies();\r\n      const movieGenres = await fetcher.getGenreOptions();\r\n      const totalCount = await fetcher.getTotalMovieCount();\r\n      const languageOptions = await fetcher.getLanguageOptions();\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        results: popularMovies,\r\n        genreOptions: movieGenres,\r\n        totalCount: totalCount,\r\n        languageOptions: languageOptions,\r\n      }));\r\n    } catch (error) {\r\n      console.log(\"Error fetching initial data: \", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    initialLoad();\r\n  }, []);\r\n\r\n  return (\r\n    <Profiler id=\"Discover page\" onRender={onRender}>\r\n      <DiscoverWrapper>\r\n        {isMobile && (\r\n          <MobilePageHeader>\r\n            <BurgerMenuIcon\r\n              onClick={toggleNavBar}\r\n              isOpen={isOpen}\r\n              aria-label=\"Open menu\"\r\n            />\r\n            <MobilePageTitle>Discover</MobilePageTitle>\r\n          </MobilePageHeader>\r\n        )}\r\n        {!isMobile && totalCount > 0 && (\r\n          <TotalCounter aria-label=\"Movie count\">\r\n            {totalCount} movies\r\n          </TotalCounter>\r\n        )}\r\n        <GridContainer>\r\n          <Suspense fallback={<Loading />}>\r\n            <MovieResults>\r\n              <MovieList\r\n                movies={(results as []) || []}\r\n                genres={(genreOptions as []) || []}\r\n              />\r\n            </MovieResults>\r\n          </Suspense>\r\n          {isMobile && totalCount > 0 && (\r\n            <TotalCounter aria-label=\"Movie count\">\r\n              {totalCount} movies\r\n            </TotalCounter>\r\n          )}\r\n          <MovieFilters>\r\n            <SearchFilters\r\n              genres={genreOptions}\r\n              ratings={ratingOptions}\r\n              languages={languageOptions}\r\n              searchMovies={(\r\n                keyword: string | undefined,\r\n                year: number | undefined\r\n              ) => searchMovies(keyword, year)}\r\n            />\r\n          </MovieFilters>\r\n        </GridContainer>\r\n      </DiscoverWrapper>\r\n    </Profiler>\r\n  );\r\n}\r\n\r\nconst DiscoverWrapper = styled.div`\r\n  padding: 60px 35px;\r\n\r\n  @media ${media.mobile} {\r\n    padding: 20px;\r\n  }\r\n`;\r\n\r\nconst GridContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr;\r\n  grid-gap: 16px;\r\n\r\n  @media ${media.mobile} {\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n  }\r\n`;\r\n\r\nconst TotalCounter = styled.div`\r\n  font-weight: 200;\r\n  font-size: 0.8em;\r\n  padding-bottom: 15px;\r\n\r\n  @media ${media.mobile} {\r\n    font-weight: 200;\r\n    font-size: 0.8em;\r\n    padding-bottom: 0px;\r\n  }\r\n`;\r\n\r\nconst MovieResults = styled.div``;\r\n\r\nconst MovieFilters = styled.div``;\r\n\r\nconst MobilePageHeader = styled.header`\r\n  @media ${media.mobile} {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 20px;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nconst MobilePageTitle = styled.h1`\r\n  @media ${media.mobile} {\r\n    display: visibile;\r\n    font-size: 30px;\r\n  }\r\n`;\r\n\r\nfunction Loading() {\r\n  return <h2>Loading...</h2>;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}