{"ast":null,"code":"var _jsxFileName = \"/Users/aliyabiggs/Documents/cord-fe-challenge-2024-06/src/pages/discover/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport * as fetcher from \"../../fetcher\";\nimport SearchFilters from \"../../components/searchfilter\";\nimport MovieList from \"../../components/movielist\";\nexport default function Discover() {\n  // You don't need to keep the current structure of this state object. Feel free to restructure it as needed.\n  const [state, setState] = useState({\n    keyword: \"\",\n    year: 0,\n    results: [],\n    movieDetails: null,\n    totalCount: 0,\n    genreOptions: [],\n    ratingOptions: [{\n      id: 7.5,\n      name: 7.5\n    }, {\n      id: 8,\n      name: 8\n    }, {\n      id: 8.5,\n      name: 8.5\n    }, {\n      id: 9,\n      name: 9\n    }, {\n      id: 9.5,\n      name: 9.5\n    }, {\n      id: 10,\n      name: 10\n    }],\n    languageOptions: [{\n      id: \"GR\",\n      name: \"Greek\"\n    }, {\n      id: \"EN\",\n      name: \"English\"\n    }, {\n      id: \"RU\",\n      name: \"Russian\"\n    }, {\n      id: \"PO\",\n      name: \"Polish\"\n    }]\n  });\n  const searchMovies = async (keyword, year) => {\n    // Write a function to trigger the API request and load the search results based on the keyword and year given as parameters\n  };\n  const {\n    genreOptions,\n    languageOptions,\n    ratingOptions,\n    totalCount,\n    results,\n    movieDetails\n  } = state;\n\n  // Write a function to preload the popular movies when page loads & get the movie genres\n  const initialLoad = async () => {\n    const popularMovies = await fetcher.getPopularMovies();\n    const movieGenres = await fetcher.getGenreOptions();\n    const totalCount = await fetcher.getTotalMovieCount();\n    setState(prevState => ({\n      ...prevState,\n      results: popularMovies,\n      genreOptions: movieGenres,\n      totalCount: totalCount\n    }));\n  };\n  useEffect(() => {\n    initialLoad();\n  }, []);\n  return /*#__PURE__*/React.createElement(DiscoverWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, totalCount > 0 && /*#__PURE__*/React.createElement(TotalCounter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 26\n    }\n  }, totalCount, \" movies\"), /*#__PURE__*/React.createElement(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MovieResults, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MovieList, {\n    movies: results || [],\n    genres: genreOptions || [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(MovieFilters, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchFilters, {\n    genres: genreOptions,\n    ratings: ratingOptions,\n    languages: languageOptions,\n    searchMovies: (keyword, year) => searchMovies(keyword, year),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }))));\n}\nconst DiscoverWrapper = styled.div`\n  padding: 60px 35px;\n`;\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-gap: 16px;\n`;\nconst TotalCounter = styled.div`\n  font-weight: 200;\n  font-size: 1em;\n`;\nconst MovieResults = styled.div``;\nconst MovieFilters = styled.div``;\nconst MobilePageTitle = styled.header``;","map":{"version":3,"names":["React","useEffect","useState","styled","fetcher","SearchFilters","MovieList","Discover","state","setState","keyword","year","results","movieDetails","totalCount","genreOptions","ratingOptions","id","name","languageOptions","searchMovies","initialLoad","popularMovies","getPopularMovies","movieGenres","getGenreOptions","getTotalMovieCount","prevState","createElement","DiscoverWrapper","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","TotalCounter","GridContainer","MovieResults","movies","genres","MovieFilters","ratings","languages","div","MobilePageTitle","header"],"sources":["/Users/aliyabiggs/Documents/cord-fe-challenge-2024-06/src/pages/discover/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport * as colors from \"../../colors\";\r\nimport * as fetcher from \"../../fetcher\";\r\n\r\nimport SearchFilters from \"../../components/searchfilter\";\r\nimport MovieList from \"../../components/movielist\";\r\n\r\nexport default function Discover() {\r\n  // You don't need to keep the current structure of this state object. Feel free to restructure it as needed.\r\n  const [state, setState] = useState({\r\n    keyword: \"\",\r\n    year: 0,\r\n    results: [],\r\n    movieDetails: null,\r\n    totalCount: 0,\r\n    genreOptions: [],\r\n    ratingOptions: [\r\n      { id: 7.5, name: 7.5 },\r\n      { id: 8, name: 8 },\r\n      { id: 8.5, name: 8.5 },\r\n      { id: 9, name: 9 },\r\n      { id: 9.5, name: 9.5 },\r\n      { id: 10, name: 10 },\r\n    ],\r\n    languageOptions: [\r\n      { id: \"GR\", name: \"Greek\" },\r\n      { id: \"EN\", name: \"English\" },\r\n      { id: \"RU\", name: \"Russian\" },\r\n      { id: \"PO\", name: \"Polish\" },\r\n    ],\r\n  });\r\n\r\n  const searchMovies = async (keyword: string, year: number) => {\r\n    // Write a function to trigger the API request and load the search results based on the keyword and year given as parameters\r\n  };\r\n\r\n  const {\r\n    genreOptions,\r\n    languageOptions,\r\n    ratingOptions,\r\n    totalCount,\r\n    results,\r\n    movieDetails,\r\n  } = state;\r\n\r\n  // Write a function to preload the popular movies when page loads & get the movie genres\r\n  const initialLoad = async () => {\r\n    const popularMovies = await fetcher.getPopularMovies();\r\n    const movieGenres = await fetcher.getGenreOptions();\r\n    const totalCount = await fetcher.getTotalMovieCount();\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      results: popularMovies,\r\n      genreOptions: movieGenres,\r\n      totalCount: totalCount,\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    initialLoad();\r\n  }, []);\r\n\r\n  return (\r\n    <DiscoverWrapper>\r\n      {/* <MobilePageTitle>Discover</MobilePageTitle> */}\r\n      {totalCount > 0 && <TotalCounter>{totalCount} movies</TotalCounter>}\r\n      <GridContainer>\r\n        <MovieResults>\r\n          <MovieList\r\n            movies={(results as []) || []}\r\n            genres={(genreOptions as []) || []}\r\n          />\r\n          {/* Each movie must have a unique URL and if clicked a pop-up should appear showing the movie details and the action buttons as shown in the wireframe */}\r\n        </MovieResults>\r\n        <MovieFilters>\r\n          <SearchFilters\r\n            genres={genreOptions}\r\n            ratings={ratingOptions}\r\n            languages={languageOptions}\r\n            searchMovies={(keyword: string, year: number) =>\r\n              searchMovies(keyword, year)\r\n            }\r\n          />\r\n        </MovieFilters>\r\n      </GridContainer>\r\n    </DiscoverWrapper>\r\n  );\r\n}\r\n\r\nconst DiscoverWrapper = styled.div`\r\n  padding: 60px 35px;\r\n`;\r\n\r\nconst GridContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr;\r\n  grid-gap: 16px;\r\n`;\r\n\r\nconst TotalCounter = styled.div`\r\n  font-weight: 200;\r\n  font-size: 1em;\r\n`;\r\n\r\nconst MovieResults = styled.div``;\r\n\r\nconst MovieFilters = styled.div``;\r\n\r\nconst MobilePageTitle = styled.header``;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}